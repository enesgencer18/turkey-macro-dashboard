ggplot(aes(x = Date, y = Inflation_Expectation))+
geom_line(size = 0.5, alpha = 1, show.legend = FALSE)+
scale_x_date(date_breaks = "6 month", date_labels =  "%m/%y")+
theme_classic()+
geom_line(stat='smooth', method = "glm", alpha=0.5, color = "darkred", formula = y ~ poly(x, 5))+
geom_ribbon(stat='smooth',method = "glm", se=TRUE,formula = y ~ poly(x, 5), alpha=0.05)+
labs(x = "Date",
y = "Inflation Expectations (12-months ahead)")
ggplotly(plot2)
#library(flexdashboard)
library(tidyverse)
library(ggplot2)
library(plotly)
library(ggthemes)
library(RColorBrewer)
residuals <- lasso_preds %>%
mutate(Residual = CPI - pred) %>%
ggplot(aes(x = Date, y = Residual))+
geom_point(size = 2, alpha = 0.8, color = "steelblue4")+
geom_ribbon(stat='smooth', se=TRUE, alpha=0.01) +
geom_line(stat='smooth', alpha=1, color = "darkred")+
theme_pander() +
labs(y = "Residual",
x = "Date",
title = "")+
scale_y_continuous(labels = scales::percent)
plot_seasonal_diagnostics
library(timetk)
plot_seasonal_diagnostics
library(timetk)
df(colnames)
colnames(df)
### Load Data
load("./analysis/ml_data.Rdata")
load("./df.Rda")
library(tidyverse)
library(ggplot2)
library(plotly)
library(ggthemes)
library(RColorBrewer)
library(timetk)
colnames(df)
CPI
df$CPI
load("./processed_data.Rdata")
load("./processed_data/processed_data.Rdata")
forecast_df %>%
plot_seasonal_diagnostics(.date_var = Date,
.value = CPI,
.geom_outlier_color = "darkred",
.feature_set = "month.lbl")
colnames(df)
df %>%
plot_seasonal_diagnostics(.date_var = Date,
.value = BoP,
.geom_outlier_color = "darkred",
.feature_set = "month.lbl")
df %>%
plot_seasonal_diagnostics(.date_var = Date,
.value = Production_Volume,
.geom_outlier_color = "darkred",
.feature_set = "month.lbl")
df %>%
plot_seasonal_diagnostics(.date_var = Date,
.value = Utilization_Rate,
.geom_outlier_color = "darkred",
.feature_set = "month.lbl")
df %>%
plot_seasonal_diagnostics(.date_var = Date,
.value = Usd_Try,
.geom_outlier_color = "darkred",
.feature_set = "month.lbl")
df %>%
plot_seasonal_diagnostics(.date_var = Date,
.value = CLI,
.geom_outlier_color = "darkred",
.feature_set = "month.lbl")
df %>%
plot_seasonal_diagnostics(.date_var = Date,
.value = RS_Confidience,
.geom_outlier_color = "darkred",
.feature_set = "month.lbl")
df %>%
plot_seasonal_diagnostics(.date_var = Date,
.value = Export_Orders,
.geom_outlier_color = "darkred",
.feature_set = "month.lbl")
df %>%
plot_seasonal_diagnostics(.date_var = Date,
.value = Consumer_Confidience,
.geom_outlier_color = "darkred",
.feature_set = "month.lbl")
install.packages("thematic")
rm(list = ls())
library(tidyverse)
library(zoo)
library(xts)
library(PerformanceAnalytics)
library(forecast)
library(lubridate)
library(modeltime)
library(timetk)
library(skimr)
library(tidymodels)
library(ggthemes)
load("./df.Rda")
df <- na.locf(df)
df <- df %>%
mutate(CPI = CPI/lag(CPI,12) - 1) %>%
mutate(Domestic_PPI = Domestic_PPI/lag(Domestic_PPI,12) -1) %>%
mutate(Production_Volume = Production_Volume/lag(Production_Volume, 12) -1) %>%
mutate(Export_Orders = Export_Orders/lag(Export_Orders, 12) -1) %>%
mutate(Average_Import_Price = Average_Import_Price * Usd_Try) %>%
mutate(Import_Annual_Ret = Average_Import_Price/lag(Average_Import_Price, 12) -1) %>%
mutate(Import_Monthly_Ret = Average_Import_Price/lag(Average_Import_Price, 1) -1) %>%
mutate(UsdTry_Annual_Ret = Usd_Try/lag(Usd_Try, 12) -1) %>%
mutate(UsdTry_Monthly_Ret = Usd_Try/lag(Usd_Try, 1) -1) %>%
select(-Average_Import_Price, -Usd_Try) %>%
filter(Date >= "2014-01-01")
forecast_df <- df %>%
future_frame(
.date_var = Date,
.length_out = "12 months",
.bind_data = TRUE)
lag_variables <- list()
# Desired Lag Length
n = 6
# Construct A List Consisting of Lag Variables
lag_variables <- map(.x = 1:n, .f = function(i){
x <- forecast_df %>%
mutate_if(is.numeric, lag, i)
colnames(x) <- c("Date",paste0(colnames(df[,-1]), "_Lag", i))
x
})
lag_df <- reduce(lag_variables,
left_join,
by = "Date")
forecast_df <- forecast_df %>%
select(Date, CPI) %>%
left_join(lag_df,
by = "Date")
View(forecast_df)
forecast_df <- forecast_df %>%
filter(Date > "2014-07-31")
forecast_df <- forecast_df %>%
mutate(Month = as.factor(month(Date)))
forecast_df$CPI_Forecast <- NA
forecast_date = as.Date(as.yearmon(today())) + months(1) - days(1)
forecast_df <- forecast_df %>%
filter(Date <= forecast_date)
forecast_tbats <- function(x){
if(is.ts(x)){
optimal_model <- tbats(x)
forecasted <- forecast(optimal_model, 1)$mean %>%
as.numeric()
forecasted
} else{
print("The provided input is not time-series object")
}
}
start_period <- 23
end_period <- nrow(forecast_df) - 1
start_year <- year(forecast_df$Date[1])
start_month <- month(forecast_df$Date[1])
forecast_df$CPI_Forecast[(start_period+1):nrow(forecast_df)] <- map_dbl(.x =start_period:end_period ,
.f = function(i){
cpi_ts <- ts(data = forecast_df$CPI[1:i],
start = c(start_year, start_month),
frequency = 12)
forecast_tbats(cpi_ts)
})
save(forecast_df, file = "./processed_data/processed_data.Rdata")
rm(list = ls())
library(tidyverse)
library(lubridate)
library(caret)
library(zoo)
load("./processed_data/processed_data.Rdata")
forecast_date = as.Date(as.yearmon(today())) + months(1) - days(1)
train_data <- forecast_df %>%
filter(Date < forecast_date)
test_data <- forecast_df %>%
filter(Date  == forecast_date)
# Construct time slices for time-series cross validation
time_slices <- trainControl(
method = "timeslice",
initialWindow = 60,
fixedWindow = TRUE,
horizon = 3,
savePredictions = TRUE,
verboseIter = TRUE
)
# Fit Regularized Regression Model
lasso_fit <- train(
CPI ~ .,
data = train_data,
na.action = "na.pass",
method = "glmnet",
preProcess = c("center", "scale"),
trControl = time_slices
)
lasso_fit
# Choose the best regularized lasso parameters
best_alpha = lasso_fit$bestTune[1] %>% pull
best_lambda = lasso_fit$bestTune[2] %>% pull
lasso_preds <- lasso_fit$pred %>%
filter(alpha == best_alpha & lambda == best_lambda)
get_predictions <- function(x){
x1 <- x %>%
filter(!Resample == unique(Resample)[length(unique(Resample))]) %>%
group_by(Resample) %>%
filter(rowIndex == min(rowIndex)) %>%
ungroup() %>%
select(rowIndex,pred, obs) %>%
rename(CPI = obs) %>%
left_join(forecast_df %>% select(Date, CPI), by = "CPI") %>%
select(Date, CPI, pred)
x2 <- x %>%
filter(Resample == unique(Resample)[length(unique(Resample))]) %>%
select(rowIndex,pred, obs) %>%
rename(CPI = obs) %>%
left_join(forecast_df %>% select(Date, CPI), by = "CPI") %>%
select(Date, CPI, pred)
res <- bind_rows(x1, x2)
res
}
lasso_preds = get_predictions(lasso_preds)
mape_vec(lasso_preds$CPI, lasso_preds$pred)
lasso_test <- tibble(Date = test_data$Date,
pred = predict(lasso_fit, test_data))
lasso_preds <- bind_rows(lasso_preds, lasso_test)
save(list = c("lasso_fit",
"lasso_preds",
"best_alpha",
"best_lambda"),file = "./analysis/ml_data.Rdata")
View(lasso_preds)
rm(list = ls())
library(tidyverse)
library(lubridate)
library(caret)
library(zoo)
load("./processed_data/processed_data.Rdata")
View(forecast_df)
# Construct time slices for time-series cross validation
time_slices <- trainControl(
method = "timeslice",
initialWindow = 48,
fixedWindow = TRUE,
horizon = 3,
savePredictions = TRUE,
verboseIter = TRUE
)
# Fit Regularized Regression Model
lasso_fit <- train(
CPI ~ .,
data = train_data,
na.action = "na.pass",
method = "glmnet",
preProcess = c("center", "scale"),
trControl = time_slices
)
load("./processed_data/processed_data.Rdata")
forecast_date = as.Date(as.yearmon(today())) + months(1) - days(1)
train_data <- forecast_df %>%
filter(Date < forecast_date)
test_data <- forecast_df %>%
filter(Date  == forecast_date)
# Construct time slices for time-series cross validation
time_slices <- trainControl(
method = "timeslice",
initialWindow = 48,
fixedWindow = TRUE,
horizon = 3,
savePredictions = TRUE,
verboseIter = TRUE
)
# Fit Regularized Regression Model
lasso_fit <- train(
CPI ~ .,
data = train_data,
na.action = "na.pass",
method = "glmnet",
preProcess = c("center", "scale"),
trControl = time_slices
)
# Choose the best regularized lasso parameters
best_alpha = lasso_fit$bestTune[1] %>% pull
best_lambda = lasso_fit$bestTune[2] %>% pull
lasso_preds <- lasso_fit$pred %>%
filter(alpha == best_alpha & lambda == best_lambda)
get_predictions <- function(x){
x1 <- x %>%
filter(!Resample == unique(Resample)[length(unique(Resample))]) %>%
group_by(Resample) %>%
filter(rowIndex == min(rowIndex)) %>%
ungroup() %>%
select(rowIndex,pred, obs) %>%
rename(CPI = obs) %>%
left_join(forecast_df %>% select(Date, CPI), by = "CPI") %>%
select(Date, CPI, pred)
x2 <- x %>%
filter(Resample == unique(Resample)[length(unique(Resample))]) %>%
select(rowIndex,pred, obs) %>%
rename(CPI = obs) %>%
left_join(forecast_df %>% select(Date, CPI), by = "CPI") %>%
select(Date, CPI, pred)
res <- bind_rows(x1, x2)
res
}
lasso_preds = get_predictions(lasso_preds)
mape_vec(lasso_preds$CPI, lasso_preds$pred)
rm(list = ls())
library(tidyverse)
library(lubridate)
library(caret)
library(zoo)
load("./processed_data/processed_data.Rdata")
forecast_date = as.Date(as.yearmon(today())) + months(1) - days(1)
train_data <- forecast_df %>%
filter(Date < forecast_date)
test_data <- forecast_df %>%
filter(Date  == forecast_date)
# Construct time slices for time-series cross validation
time_slices <- trainControl(
method = "timeslice",
initialWindow = 60,
fixedWindow = TRUE,
horizon = 3,
savePredictions = TRUE,
verboseIter = TRUE
)
# Fit Regularized Regression Model
lasso_fit <- train(
CPI ~ .,
data = train_data,
na.action = "na.pass",
method = "glmnet",
preProcess = c("center", "scale"),
trControl = time_slices
)
# Choose the best regularized lasso parameters
best_alpha = lasso_fit$bestTune[1] %>% pull
best_lambda = lasso_fit$bestTune[2] %>% pull
lasso_preds <- lasso_fit$pred %>%
filter(alpha == best_alpha & lambda == best_lambda)
get_predictions <- function(x){
x1 <- x %>%
filter(!Resample == unique(Resample)[length(unique(Resample))]) %>%
group_by(Resample) %>%
filter(rowIndex == min(rowIndex)) %>%
ungroup() %>%
select(rowIndex,pred, obs) %>%
rename(CPI = obs) %>%
left_join(forecast_df %>% select(Date, CPI), by = "CPI") %>%
select(Date, CPI, pred)
x2 <- x %>%
filter(Resample == unique(Resample)[length(unique(Resample))]) %>%
select(rowIndex,pred, obs) %>%
rename(CPI = obs) %>%
left_join(forecast_df %>% select(Date, CPI), by = "CPI") %>%
select(Date, CPI, pred)
res <- bind_rows(x1, x2)
res
}
lasso_preds = get_predictions(lasso_preds)
mape_vec(lasso_preds$CPI, lasso_preds$pred)
rm(list = ls())
library(tidyverse)
library(lubridate)
library(caret)
library(zoo)
load("./processed_data/processed_data.Rdata")
forecast_date = as.Date(as.yearmon(today())) + months(1) - days(1)
train_data <- forecast_df %>%
filter(Date < forecast_date)
test_data <- forecast_df %>%
filter(Date  == forecast_date)
# Construct time slices for time-series cross validation
time_slices <- trainControl(
method = "timeslice",
initialWindow = 60,
fixedWindow = FALSE,
horizon = 3,
savePredictions = TRUE,
verboseIter = TRUE
)
# Fit Regularized Regression Model
lasso_fit <- train(
CPI ~ .,
data = train_data,
na.action = "na.pass",
method = "glmnet",
preProcess = c("center", "scale"),
trControl = time_slices
)
# Choose the best regularized lasso parameters
best_alpha = lasso_fit$bestTune[1] %>% pull
best_lambda = lasso_fit$bestTune[2] %>% pull
lasso_preds <- lasso_fit$pred %>%
filter(alpha == best_alpha & lambda == best_lambda)
get_predictions <- function(x){
x1 <- x %>%
filter(!Resample == unique(Resample)[length(unique(Resample))]) %>%
group_by(Resample) %>%
filter(rowIndex == min(rowIndex)) %>%
ungroup() %>%
select(rowIndex,pred, obs) %>%
rename(CPI = obs) %>%
left_join(forecast_df %>% select(Date, CPI), by = "CPI") %>%
select(Date, CPI, pred)
x2 <- x %>%
filter(Resample == unique(Resample)[length(unique(Resample))]) %>%
select(rowIndex,pred, obs) %>%
rename(CPI = obs) %>%
left_join(forecast_df %>% select(Date, CPI), by = "CPI") %>%
select(Date, CPI, pred)
res <- bind_rows(x1, x2)
res
}
lasso_preds = get_predictions(lasso_preds)
mape_vec(lasso_preds$CPI, lasso_preds$pred)
rm(list = ls())
library(tidyverse)
library(lubridate)
library(caret)
library(zoo)
load("./processed_data/processed_data.Rdata")
forecast_date = as.Date(as.yearmon(today())) + months(1) - days(1)
train_data <- forecast_df %>%
filter(Date < forecast_date)
test_data <- forecast_df %>%
filter(Date  == forecast_date)
# Construct time slices for time-series cross validation
time_slices <- trainControl(
method = "timeslice",
initialWindow = 36,
fixedWindow = TRUE,
horizon = 3,
savePredictions = TRUE,
verboseIter = TRUE
)
# Fit Regularized Regression Model
lasso_fit <- train(
CPI ~ .,
data = train_data,
na.action = "na.pass",
method = "glmnet",
preProcess = c("center", "scale"),
trControl = time_slices
)
# Choose the best regularized lasso parameters
best_alpha = lasso_fit$bestTune[1] %>% pull
best_lambda = lasso_fit$bestTune[2] %>% pull
lasso_preds <- lasso_fit$pred %>%
filter(alpha == best_alpha & lambda == best_lambda)
get_predictions <- function(x){
x1 <- x %>%
filter(!Resample == unique(Resample)[length(unique(Resample))]) %>%
group_by(Resample) %>%
filter(rowIndex == min(rowIndex)) %>%
ungroup() %>%
select(rowIndex,pred, obs) %>%
rename(CPI = obs) %>%
left_join(forecast_df %>% select(Date, CPI), by = "CPI") %>%
select(Date, CPI, pred)
x2 <- x %>%
filter(Resample == unique(Resample)[length(unique(Resample))]) %>%
select(rowIndex,pred, obs) %>%
rename(CPI = obs) %>%
left_join(forecast_df %>% select(Date, CPI), by = "CPI") %>%
select(Date, CPI, pred)
res <- bind_rows(x1, x2)
res
}
lasso_preds = get_predictions(lasso_preds)
mape_vec(lasso_preds$CPI, lasso_preds$pred)
lasso_preds
lasso_fit
lasso_preds = get_predictions(lasso_preds)
mape_vec(lasso_preds$CPI, lasso_preds$pred)
lasso_test <- tibble(Date = test_data$Date,
pred = predict(lasso_fit, test_data))
lasso_preds <- bind_rows(lasso_preds, lasso_test)
save(list = c("lasso_fit",
"lasso_preds",
"best_alpha",
"best_lambda"),file = "./analysis/ml_data.Rdata")
lasso_preds
#library(flexdashboard)
library(tidyverse)
library(ggplot2)
library(plotly)
library(ggthemes)
library(RColorBrewer)
library(timetk)
inf_plot <-lasso_preds %>%
rename(Actual = CPI,
Forecasted = pred) %>%
gather(key = "Variable", value = "Value", Actual:Forecasted) %>%
ggplot(aes(x = Date, y = Value, color = Variable))+
geom_line(size = 0.5, alpha = 0.5, show.legend = FALSE)+
geom_point(size = 0.75, alpha = 0.75, show.legend = FALSE)+
scale_color_manual(values = c("steelblue4", "darkred"))+
theme_calc()+
scale_y_continuous(labels = scales::percent)+
scale_x_date(date_breaks = "2 month", date_labels =  "%m/%y")+
labs(x = "Date",
y = "",
title = "",
caption = "Source: TCMB")+
theme(plot.title = element_text(face = "italic"), legend.position = "bottom")
ggplotly(inf_plot)
