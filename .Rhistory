geom_point(size = 0.75, alpha = 0.75)+
scale_color_manual(values = c("steelblue4", "darkred"))+
theme_bw()+
scale_y_continuous(labels = scales::percent)+
scale_x_date(breaks = seq(min(lasso_preds$Date),
max(lasso_preds$Date),
by="4 months"),
date_labels = '%m-%y')+
labs(x = "",
y = "",
subtitle = "Based on YoY CPI changes",
title = "One-month ahead inflation forecast",
color = "")+
expand_limits(y = 0)+
theme(plot.subtitle = element_text(face = "italic"))
forecast_date = "2022-03-31"
train_data <- forecast_df %>%
filter(Date < forecast_date)
test_data <- forecast_df %>%
filter(Date  == forecast_date)
tail(train_data,3)
head(test_data)
# Construct time slices for time-series cross validation
time_slices <- trainControl(
method = "timeslice",
initialWindow = 36,
fixedWindow = TRUE,
horizon = 3,
savePredictions = TRUE,
verboseIter = FALSE
)
# Train the model
elastic_net_fit <- train(
CPI ~ .,
data = train_data[,-1],
na.action = "na.pass",
method = "glmnet",
preProcess = c("center", "scale"),
trControl = time_slices
)
elastic_net_fit
# Choose the best regularization parameters
best_alpha = elastic_net_fit$bestTune[1] %>% pull
best_alpha
best_lambda = elastic_net_fit$bestTune[2] %>% pull
best_lambda
lasso_preds <- elastic_net_fit$pred %>%
filter(alpha == best_alpha,
lambda == best_lambda)
# Collect predictions
get_predictions <- function(x){
x1 <- x %>%
filter(!Resample == unique(Resample)[length(unique(Resample))]) %>%
group_by(Resample) %>%
filter(rowIndex == min(rowIndex)) %>%
ungroup() %>%
select(rowIndex,pred, obs) %>%
rename(CPI = obs) %>%
left_join(forecast_df %>% select(Date, CPI), by = "CPI") %>%
select(Date, CPI, pred)
x2 <- x %>%
filter(Resample == unique(Resample)[length(unique(Resample))]) %>%
select(rowIndex,pred, obs) %>%
rename(CPI = obs) %>%
left_join(forecast_df %>% select(Date, CPI), by = "CPI") %>%
select(Date, CPI, pred)
res <- bind_rows(x1, x2)
res
}
lasso_preds = get_predictions(lasso_preds)
lasso_test <- tibble(Date = test_data$Date,
pred = predict(elastic_net_fit,
test_data))
lasso_preds <- bind_rows(lasso_preds, lasso_test)
# Visualize results
lasso_preds %>%
rename(Actual = CPI,
Forecasted = pred) %>%
gather(key = "Variable", value = "Value", Actual:Forecasted) %>%
ggplot(aes(x = Date, y = Value, color = Variable))+
geom_line(size = 0.75, alpha = 0.5)+
geom_point(size = 0.75, alpha = 0.75)+
scale_color_manual(values = c("steelblue4", "darkred"))+
theme_bw()+
scale_y_continuous(labels = scales::percent)+
scale_x_date(breaks = seq(min(lasso_preds$Date),
max(lasso_preds$Date),
by="4 months"),
date_labels = '%m-%y')+
labs(x = "",
y = "",
subtitle = "Based on YoY CPI changes",
title = "One-month ahead inflation forecast",
color = "")+
expand_limits(y = 0)+
theme(plot.subtitle = element_text(face = "italic"))
lasso_preds %>%
ggplot(aes(x = pred, y = CPI))+
geom_point(size = 1.5, alpha = 0.8, color = "darkred")+
geom_abline(intercept = 0,
slope = 1,
size = 0.3,
linetype = 3,
alpha = 0.8,
color = "steelblue4")+
theme_bw()+
scale_y_continuous(labels = scales::percent)+
scale_x_continuous(labels = scales::percent)+
expand_limits(y = 0, x = 0)+
labs(title = "Model Prediction & True Value",
x = "Model Prediction",
y = "True Value")
lasso_preds %>%
mutate(Residual = CPI - pred) %>%
ggplot(aes(x = Date, y = Residual))+
geom_point(size = 1.5, alpha = 0.8, color = "steelblue4")+
geom_ribbon(stat='smooth', se=TRUE, alpha=0.05) +
geom_line(stat='smooth', alpha=1, color = "darkred")+
theme_bw() +
labs(y = "Residuals",
x = "",
title = "Elastic Net Model Residuals",
subtitle = "Over time")+
scale_y_continuous(labels = scales::percent)
var_names <- coef(elastic_net_fit$finalModel,
elastic_net_fit$finalModel$lambdaOpt) %>%
rownames()
var_values <- coef(elastic_net_fit$finalModel,
elastic_net_fit$finalModel$lambdaOpt) %>%
as.numeric()
model_result <- tibble(Variable_Names = var_names,
Coefficients = var_values)
model_result %>%
mutate(Variable = gsub('[[:digit:]]+', '',
str_remove(model_result$Variable_Names,
"_Lag"))) %>%
group_by(Variable) %>%
summarise(Overall_Effect = sum(Coefficients)) %>%
filter(!Overall_Effect == 0) %>%
filter(!Variable == "(Intercept)") %>%
mutate(If_Positive = ifelse(Overall_Effect >0, "Positive", "Negative")) %>%
mutate(Sum = sum(abs(Overall_Effect))) %>%
mutate(Percent_Effect = Overall_Effect / Sum) %>%
ggplot(aes(x = reorder(Variable, abs(Overall_Effect)), y = abs(Percent_Effect), fill = If_Positive))+
geom_col(alpha = 3)+
scale_y_continuous(labels = scales::percent)+
expand_limits(y = c(0,0.45))+
coord_flip() +
labs(y = "",
x = "",
fill = "",
title = "The weighted effects macroeconomic variables on Turkey's Inflation",
subtitle = "Shows the overall effect through different lags",
caption = "Source: CBRT")+
theme_bw()+
scale_fill_wsj()
train_data
tail(train_data,3)
head(test_data)
View(df)
rm(list = ls())
library(tidyverse)
library(zoo)
library(xts)
library(PerformanceAnalytics)
library(forecast)
library(lubridate)
library(modeltime)
library(timetk)
load("./raw_data/df.Rda")
df
View(df)
df <- df %>%
mutate(CPI = CPI/lag(CPI,12) - 1) %>%
mutate(Domestic_PPI = Domestic_PPI/lag(Domestic_PPI,12) -1) %>%
mutate(Production_Volume = Production_Volume/lag(Production_Volume, 12) -1) %>%
mutate(Export_Orders = Export_Orders/lag(Export_Orders, 12) -1) %>%
mutate(Average_Import_Price = Average_Import_Price * Usd_Try) %>%
mutate(Import_Annual_Ret = Average_Import_Price/lag(Average_Import_Price, 12) -1) %>%
mutate(Import_Monthly_Ret = Average_Import_Price/lag(Average_Import_Price, 1) -1) %>%
mutate(UsdTry_Annual_Ret = Usd_Try/lag(Usd_Try, 12) -1) %>%
mutate(UsdTry_Monthly_Ret = Usd_Try/lag(Usd_Try, 1) -1) %>%
select(-Average_Import_Price, -Usd_Try) %>%
filter(Date >= "2014-01-01")
forecast_df <- df %>%
future_frame(
.date_var = Date,
.length_out = "12 months",
.bind_data = TRUE)
lag_variables <- list()
# Desired Lag Length
n = 6
# Construct A List Consisting of Lag Variables
lag_variables <- map(.x = 1:n, .f = function(i){
x <- forecast_df %>%
mutate_if(is.numeric, lag, i)
colnames(x) <- c("Date",paste0(colnames(df[,-1]), "_Lag", i))
x
})
lag_df <- reduce(lag_variables,
left_join,
by = "Date")
forecast_df <- forecast_df %>%
select(Date, CPI) %>%
left_join(lag_df,
by = "Date")
forecast_df <- forecast_df %>%
filter(Date > "2014-07-31")
forecast_df <- forecast_df %>%
select(-Import_Annual_Ret_Lag1,
-Import_Annual_Ret_Lag2,
-Import_Monthly_Ret_Lag1,
-Import_Monthly_Ret_Lag2
-BoP_Lag1,)
forecast_df <- forecast_df %>%
mutate(Month = as.factor(month(Date)))
forecast_df$CPI_Forecast <- NA
forecast_date = as.Date(as.yearmon(today())) + months(1) - days(1)
forecast_df <- forecast_df %>%
filter(Date <= forecast_date)
View(forecast_df)
as.Date(as.yearmon(today())) + months(1) - days(1)
as.Date(as.yearmon("2022-03-29")) + months(1) - days(1)
library(tidyverse)
library(lubridate)
library(caret)
library(zoo)
library(ggthemes)
load("~/turkey-macro-dashboard/processed_data/processed_data.Rdata")
forecast_date = "2022-03-31"
train_data <- forecast_df %>%
filter(Date < forecast_date)
test_data <- forecast_df %>%
filter(Date  == forecast_date)
tail(train_data,3)
head(test_data)
time_slices <- trainControl(
method = "timeslice",
initialWindow = 36,
fixedWindow = TRUE,
horizon = 3,
savePredictions = TRUE,
verboseIter = FALSE
)
elastic_net_fit <- train(
CPI ~ .,
data = train_data[,-1],
na.action = "na.pass",
method = "glmnet",
preProcess = c("center", "scale"),
trControl = time_slices
)
elastic_net_fit
best_alpha = elastic_net_fit$bestTune[1] %>% pull
best_alpha
best_lambda = elastic_net_fit$bestTune[2] %>% pull
best_lambda
lasso_preds <- elastic_net_fit$pred %>%
filter(alpha == best_alpha,
lambda == best_lambda)
get_predictions <- function(x){
x1 <- x %>%
filter(!Resample == unique(Resample)[length(unique(Resample))]) %>%
group_by(Resample) %>%
filter(rowIndex == min(rowIndex)) %>%
ungroup() %>%
select(rowIndex,pred, obs) %>%
rename(CPI = obs) %>%
left_join(forecast_df %>% select(Date, CPI), by = "CPI") %>%
select(Date, CPI, pred)
x2 <- x %>%
filter(Resample == unique(Resample)[length(unique(Resample))]) %>%
select(rowIndex,pred, obs) %>%
rename(CPI = obs) %>%
left_join(forecast_df %>% select(Date, CPI), by = "CPI") %>%
select(Date, CPI, pred)
res <- bind_rows(x1, x2)
res
}
lasso_preds = get_predictions(lasso_preds)
lasso_test <- tibble(Date = test_data$Date,
pred = predict(elastic_net_fit,
test_data))
lasso_preds <- bind_rows(lasso_preds, lasso_test)
lasso_preds %>%
rename(Actual = CPI,
Forecasted = pred) %>%
gather(key = "Variable", value = "Value", Actual:Forecasted) %>%
ggplot(aes(x = Date, y = Value, color = Variable))+
geom_line(size = 0.75, alpha = 0.5)+
geom_point(size = 0.75, alpha = 0.75)+
scale_color_manual(values = c("steelblue4", "darkred"))+
theme_bw()+
scale_y_continuous(labels = scales::percent)+
scale_x_date(breaks = seq(min(lasso_preds$Date),
max(lasso_preds$Date),
by="4 months"),
date_labels = '%m-%y')+
labs(x = "",
y = "",
subtitle = "Based on YoY CPI changes",
title = "One-month ahead inflation forecast",
color = "")+
expand_limits(y = 0)+
theme(plot.subtitle = element_text(face = "italic"))
lasso_preds %>%
ggplot(aes(x = pred, y = CPI))+
geom_point(size = 1.5, alpha = 0.8, color = "darkred")+
geom_abline(intercept = 0,
slope = 1,
size = 0.3,
linetype = 3,
alpha = 0.8,
color = "steelblue4")+
theme_bw()+
scale_y_continuous(labels = scales::percent)+
scale_x_continuous(labels = scales::percent)+
expand_limits(y = 0, x = 0)+
labs(title = "Model Prediction & True Value",
x = "Model Prediction",
y = "True Value")
lasso_preds %>%
mutate(Residual = CPI - pred) %>%
ggplot(aes(x = Date, y = Residual))+
geom_point(size = 1.5, alpha = 0.8, color = "steelblue4")+
geom_ribbon(stat='smooth', se=TRUE, alpha=0.05) +
geom_line(stat='smooth', alpha=1, color = "darkred")+
theme_bw() +
labs(y = "Residuals",
x = "",
title = "Elastic Net Model Residuals",
subtitle = "Over time")+
scale_y_continuous(labels = scales::percent)
var_names <- coef(elastic_net_fit$finalModel,
elastic_net_fit$finalModel$lambdaOpt) %>%
rownames()
var_values <- coef(elastic_net_fit$finalModel,
elastic_net_fit$finalModel$lambdaOpt) %>%
as.numeric()
model_result <- tibble(Variable_Names = var_names,
Coefficients = var_values)
model_result %>%
mutate(Variable = gsub('[[:digit:]]+', '',
str_remove(model_result$Variable_Names,
"_Lag"))) %>%
group_by(Variable) %>%
summarise(Overall_Effect = sum(Coefficients)) %>%
filter(!Overall_Effect == 0) %>%
filter(!Variable == "(Intercept)") %>%
mutate(If_Positive = ifelse(Overall_Effect >0, "Positive", "Negative")) %>%
mutate(Sum = sum(abs(Overall_Effect))) %>%
mutate(Percent_Effect = Overall_Effect / Sum) %>%
ggplot(aes(x = reorder(Variable, abs(Overall_Effect)), y = abs(Percent_Effect), fill = If_Positive))+
geom_col(alpha = 3)+
scale_y_continuous(labels = scales::percent)+
expand_limits(y = c(0,0.45))+
coord_flip() +
labs(y = "",
x = "",
fill = "",
title = "The weighted effects macroeconomic variables on Turkey's Inflation",
subtitle = "Shows the overall effect through different lags",
caption = "Source: CBRT")+
theme_bw()+
scale_fill_wsj()
devtools:sessionInfo()
devtools::sessionInfo()
devtools::session_info()
sessionInfo()
rm(list = ls())
library(tidyverse)
library(lubridate)
library(caret)
library(zoo)
library(ggthemes)
load("~/turkey-macro-dashboard/processed_data/processed_data.Rdata")
forecast_date = "2022-03-31"
train_data <- forecast_df %>%
filter(Date < forecast_date)
test_data <- forecast_df %>%
filter(Date  == forecast_date)
tail(train_data,3)
head(test_data)
time_slices <- trainControl(
method = "timeslice",
initialWindow = 36,
fixedWindow = TRUE,
horizon = 3,
savePredictions = TRUE,
verboseIter = FALSE
)
elastic_net_fit <- train(
CPI ~ .,
data = train_data[,-1],
na.action = "na.pass",
method = "glmnet",
preProcess = c("center", "scale"),
trControl = time_slices
)
elastic_net_fit
best_alpha = elastic_net_fit$bestTune[1] %>% pull
best_alpha
best_lambda = elastic_net_fit$bestTune[2] %>% pull
best_lambda
lasso_preds <- elastic_net_fit$pred %>%
filter(alpha == best_alpha,
lambda == best_lambda)
get_predictions <- function(x){
x1 <- x %>%
filter(!Resample == unique(Resample)[length(unique(Resample))]) %>%
group_by(Resample) %>%
filter(rowIndex == min(rowIndex)) %>%
ungroup() %>%
select(rowIndex,pred, obs) %>%
rename(CPI = obs) %>%
left_join(forecast_df %>% select(Date, CPI), by = "CPI") %>%
select(Date, CPI, pred)
x2 <- x %>%
filter(Resample == unique(Resample)[length(unique(Resample))]) %>%
select(rowIndex,pred, obs) %>%
rename(CPI = obs) %>%
left_join(forecast_df %>% select(Date, CPI), by = "CPI") %>%
select(Date, CPI, pred)
res <- bind_rows(x1, x2)
res
}
lasso_preds = get_predictions(lasso_preds)
lasso_test <- tibble(Date = test_data$Date,
pred = predict(elastic_net_fit,
test_data))
lasso_preds <- bind_rows(lasso_preds, lasso_test)
lasso_preds %>%
rename(Actual = CPI,
Forecasted = pred) %>%
gather(key = "Variable", value = "Value", Actual:Forecasted) %>%
ggplot(aes(x = Date, y = Value, color = Variable))+
geom_line(size = 0.75, alpha = 0.5)+
geom_point(size = 0.75, alpha = 0.75)+
scale_color_manual(values = c("steelblue4", "darkred"))+
theme_bw()+
scale_y_continuous(labels = scales::percent)+
scale_x_date(breaks = seq(min(lasso_preds$Date),
max(lasso_preds$Date),
by="4 months"),
date_labels = '%m-%y')+
labs(x = "",
y = "",
subtitle = "Based on YoY CPI changes",
title = "One-month ahead inflation forecast",
color = "")+
expand_limits(y = 0)+
theme(plot.subtitle = element_text(face = "italic"))
lasso_preds %>%
ggplot(aes(x = pred, y = CPI))+
geom_point(size = 1.5, alpha = 0.8, color = "darkred")+
geom_abline(intercept = 0,
slope = 1,
size = 0.3,
linetype = 3,
alpha = 0.8,
color = "steelblue4")+
theme_bw()+
scale_y_continuous(labels = scales::percent)+
scale_x_continuous(labels = scales::percent)+
expand_limits(y = 0, x = 0)+
labs(title = "Model Prediction & True Value",
x = "Model Prediction",
y = "True Value")
lasso_preds %>%
mutate(Residual = CPI - pred) %>%
ggplot(aes(x = Date, y = Residual))+
geom_point(size = 1.5, alpha = 0.8, color = "steelblue4")+
geom_ribbon(stat='smooth', se=TRUE, alpha=0.05) +
geom_line(stat='smooth', alpha=1, color = "darkred")+
theme_bw() +
labs(y = "Residuals",
x = "",
title = "Elastic Net Model Residuals",
subtitle = "Over time")+
scale_y_continuous(labels = scales::percent)
var_names <- coef(elastic_net_fit$finalModel,
elastic_net_fit$finalModel$lambdaOpt) %>%
rownames()
var_values <- coef(elastic_net_fit$finalModel,
elastic_net_fit$finalModel$lambdaOpt) %>%
as.numeric()
model_result <- tibble(Variable_Names = var_names,
Coefficients = var_values)
model_result %>%
mutate(Variable = gsub('[[:digit:]]+', '',
str_remove(model_result$Variable_Names,
"_Lag"))) %>%
group_by(Variable) %>%
summarise(Overall_Effect = sum(Coefficients)) %>%
filter(!Overall_Effect == 0) %>%
filter(!Variable == "(Intercept)") %>%
mutate(If_Positive = ifelse(Overall_Effect >0, "Positive", "Negative")) %>%
mutate(Sum = sum(abs(Overall_Effect))) %>%
mutate(Percent_Effect = Overall_Effect / Sum) %>%
ggplot(aes(x = reorder(Variable, abs(Overall_Effect)), y = abs(Percent_Effect), fill = If_Positive))+
geom_col(alpha = 3)+
scale_y_continuous(labels = scales::percent)+
expand_limits(y = c(0,0.45))+
coord_flip() +
labs(y = "",
x = "",
fill = "",
title = "The weighted effects macroeconomic variables on Turkey's Inflation",
subtitle = "Shows the overall effect through different lags",
caption = "Source: CBRT")+
theme_bw()+
scale_fill_wsj()
