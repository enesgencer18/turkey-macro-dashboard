elastic_net_fit$finalModel$lambdaOpt) %>%
as.numeric()
model_result <- tibble(Variable_Names = var_names,
Coefficients = var_values)
model_result %>%
mutate(Variable = gsub('[[:digit:]]+', '',
str_remove(model_result$Variable_Names,
"_Lag"))) %>%
group_by(Variable) %>%
summarise(Overall_Effect = sum(Coefficients)) %>%
filter(!Overall_Effect == 0) %>%
filter(!Variable == "(Intercept)") %>%
mutate(If_Positive = ifelse(Overall_Effect >0, "Positive", "Negative")) %>%
mutate(Sum = sum(abs(Overall_Effect))) %>%
mutate(Percent_Effect = Overall_Effect / Sum) %>%
ggplot(aes(x = reorder(Variable, abs(Overall_Effect)), y = abs(Percent_Effect), fill = If_Positive))+
geom_col(alpha = 3)+
scale_y_continuous(labels = scales::percent)+
expand_limits(y = c(0,0.45))+
coord_flip() +
labs(y = "",
x = "",
fill = "",
title = "The weighted effects macroeconomic variables on Turkey's Inflation",
subtitle = "Shows the overall effect through different lags",
caption = "Source: CBRT")+
theme_bw()+
scale_fill_wsj()
?horizon
?time_slice
??time_slices
?time_slices
?trainControl
library(tidyverse)
library(lubridate)
library(caret)
library(zoo)
load("./processed_data/processed_data.Rdata")
forecast_date = as.Date(as.yearmon(today())) + months(1) - days(1)
train_data <- forecast_df %>%
filter(Date < forecast_date)
test_data <- forecast_df %>%
filter(Date  == forecast_date)
# Construct time slices for time-series cross validation
time_slices <- trainControl(
method = "timeslice",
initialWindow = 36,
fixedWindow = TRUE,
horizon = 3,
savePredictions = TRUE,
verboseIter = TRUE
)
# Fit Regularized Regression Model
lasso_fit <- train(
CPI ~ .,
data = train_data,
na.action = "na.pass",
method = "glmnet",
preProcess = c("center", "scale"),
trControl = time_slices
)
lasso_fit
mars_fit <- train(
CPI ~ .,
data = train_data,
#na.action = "na.pass",
method = "earth",
#preProcess = c("center", "scale"),
trControl = time_slices
)
mars_fit <- train(
CPI ~ .,
data = train_data,
na.action = "na.pass",
method = "earth",
#preProcess = c("center", "scale"),
trControl = time_slices
)
train_data
tail(train_data)
anyNA(train_data)
apply(train_data, 2, anyNa)
apply(train_data, 2, anyNA)
mars_fit <- train(
CPI ~ .,
data = train_data[,-ncol(train_data)],
na.action = "na.pass",
method = "earth",
#preProcess = c("center", "scale"),
trControl = time_slices
)
mars_fit
lasso_fit
knitr::opts_chunk$set(warning = FALSE, message = FALSE, echo = FALSE)
library(tidyverse)
library(lubridate)
library(caret)
library(zoo)
library(ggthemes)
load("~/turkey-macro-dashboard/processed_data/processed_data.Rdata")
forecast_df
forecast_df %>% tail()
forecast_date = as.Date(as.yearmon(today())) + months(1) - days(1)
train_data <- forecast_df %>%
filter(Date < forecast_date)
test_data <- forecast_df %>%
filter(Date  == forecast_date)
tail(train_data,3)
head(test_data)
time_slices <- trainControl(
method = "timeslice",
initialWindow = 36,
fixedWindow = TRUE,
horizon = 3,
savePredictions = TRUE,
verboseIter = FALSE
)
elastic_net_fit <- train(
CPI ~ .,
data = train_data[,-1],
na.action = "na.pass",
method = "glmnet",
preProcess = c("center", "scale"),
trControl = time_slices
)
View(train_data)
elastic_net_fit <- train(
CPI ~ .,
data = train_data[,-1],
na.action = "na.omit",
method = "glmnet",
preProcess = c("center", "scale"),
trControl = time_slices
)
elastic_net_fit
best_alpha = elastic_net_fit$bestTune[1] %>% pull
best_alpha
best_lambda = elastic_net_fit$bestTune[2] %>% pull
best_lambda
lasso_preds <- elastic_net_fit$pred %>%
filter(alpha == best_alpha,
lambda == best_lambda)
get_predictions <- function(x){
x1 <- x %>%
filter(!Resample == unique(Resample)[length(unique(Resample))]) %>%
group_by(Resample) %>%
filter(rowIndex == min(rowIndex)) %>%
ungroup() %>%
select(rowIndex,pred, obs) %>%
rename(CPI = obs) %>%
left_join(forecast_df %>% select(Date, CPI), by = "CPI") %>%
select(Date, CPI, pred)
x2 <- x %>%
filter(Resample == unique(Resample)[length(unique(Resample))]) %>%
select(rowIndex,pred, obs) %>%
rename(CPI = obs) %>%
left_join(forecast_df %>% select(Date, CPI), by = "CPI") %>%
select(Date, CPI, pred)
res <- bind_rows(x1, x2)
res
}
lasso_preds = get_predictions(lasso_preds)
lasso_test <- tibble(Date = test_data$Date,
pred = predict(elastic_net_fit,
test_data))
lasso_preds <- bind_rows(lasso_preds, lasso_test)
lasso_preds %>%
rename(Actual = CPI,
Forecasted = pred) %>%
gather(key = "Variable", value = "Value", Actual:Forecasted) %>%
ggplot(aes(x = Date, y = Value, color = Variable))+
geom_line(size = 0.75, alpha = 0.5)+
geom_point(size = 0.75, alpha = 0.75)+
scale_color_manual(values = c("steelblue4", "darkred"))+
theme_bw()+
scale_y_continuous(labels = scales::percent)+
scale_x_date(breaks = seq(min(lasso_preds$Date),
max(lasso_preds$Date),
by="4 months"),
date_labels = '%m-%y')+
labs(x = "",
y = "",
subtitle = "Based on YoY CPI changes",
title = "One-month ahead inflation forecast",
color = "")+
expand_limits(y = 0)+
theme(plot.subtitle = element_text(face = "italic"))
lasso_preds %>%
ggplot(aes(x = pred, y = CPI))+
geom_point(size = 1.5, alpha = 0.8, color = "darkred")+
geom_abline(intercept = 0,
slope = 1,
size = 0.3,
linetype = 3,
alpha = 0.8,
color = "steelblue4")+
theme_bw()+
scale_y_continuous(labels = scales::percent)+
scale_x_continuous(labels = scales::percent)+
expand_limits(y = 0, x = 0)+
labs(title = "Model Prediction & True Value",
x = "Model Prediction",
y = "True Value")
lasso_preds %>%
mutate(Residual = CPI - pred) %>%
ggplot(aes(x = Date, y = Residual))+
geom_point(size = 1.5, alpha = 0.8, color = "steelblue4")+
geom_ribbon(stat='smooth', se=TRUE, alpha=0.05) +
geom_line(stat='smooth', alpha=1, color = "darkred")+
theme_bw() +
labs(y = "Residuals",
x = "",
title = "Elastic Net Model Residuals",
subtitle = "Over time")+
scale_y_continuous(labels = scales::percent)
var_names <- coef(elastic_net_fit$finalModel,
elastic_net_fit$finalModel$lambdaOpt) %>%
rownames()
var_values <- coef(elastic_net_fit$finalModel,
elastic_net_fit$finalModel$lambdaOpt) %>%
as.numeric()
model_result <- tibble(Variable_Names = var_names,
Coefficients = var_values)
model_result %>%
mutate(Variable = gsub('[[:digit:]]+', '',
str_remove(model_result$Variable_Names,
"_Lag"))) %>%
group_by(Variable) %>%
summarise(Overall_Effect = sum(Coefficients)) %>%
filter(!Overall_Effect == 0) %>%
filter(!Variable == "(Intercept)") %>%
mutate(If_Positive = ifelse(Overall_Effect >0, "Positive", "Negative")) %>%
mutate(Sum = sum(abs(Overall_Effect))) %>%
mutate(Percent_Effect = Overall_Effect / Sum) %>%
ggplot(aes(x = reorder(Variable, abs(Overall_Effect)), y = abs(Percent_Effect), fill = If_Positive))+
geom_col(alpha = 3)+
scale_y_continuous(labels = scales::percent)+
expand_limits(y = c(0,0.45))+
coord_flip() +
labs(y = "",
x = "",
fill = "",
title = "The weighted effects macroeconomic variables on Turkey's Inflation",
subtitle = "Shows the overall effect through different lags",
caption = "Source: CBRT")+
theme_bw()+
scale_fill_wsj()
elastic_net_fit <- train(
CPI ~ .,
data = train_data[,-1],
na.action = "na.pass",
method = "glmnet",
preProcess = c("center", "scale"),
trControl = time_slices
)
train_data$CPI_Forecast = NULL
elastic_net_fit <- train(
CPI ~ .,
data = train_data[,-1],
na.action = "na.pass",
method = "glmnet",
preProcess = c("center", "scale"),
trControl = time_slices
)
test_data
load("~/turkey-macro-dashboard/processed_data/processed_data.Rdata")
forecast_date = as.Date(as.yearmon(today())) + months(1) - days(1)
forecast_date
as.Date(as.yearmon(today()))
as.Date(as.yearmon(today()))
day(as.Date(as.yearmon(today())))
as.Date(paste0(year(as.Date(as.yearmon(today())))))
as.yearmon(today())
as.yearmon(today()) - 1
as.yearmon(today()) - day(1)
as.yearmon(today())
as.Date(as.yearmon(today()))
as.Date(as.yearmon(today())) - 1
forecast_date = ifelse(day(as.Date(as.yearmon(today()))) > 15,
as.Date(as.yearmon(today())) + months(1) - days(1),
as.Date(as.yearmon(today())) - 1)
forecast_date
forecast_date = case_when(day(as.Date(as.yearmon(today()))) > 15 ~ as.Date(as.yearmon(today())) + months(1) - days(1),
TRUE ~ as.Date(as.yearmon(today())) - 1)
forecast_date
forecast_date = case_when(day(as.Date(as.yearmon(today()))) > 15 ~ as.Date(as.yearmon(today())) + months(1) - days(1),
TRUE ~ as.Date(as.yearmon(today())) - 1)
train_data <- forecast_df %>%
filter(Date < forecast_date)
forecast_date = case_when(
day(as.Date(as.yearmon(today(
)))) > 15 ~ as.Date(as.yearmon(today())) + months(1) - days(1),
TRUE ~ as.Date(as.yearmon(today())) - 1
)
train_data <- forecast_df %>%
filter(Date < forecast_date)
test_data <- forecast_df %>%
filter(Date  == forecast_date)
train_data
tail(train_data,3)
head(test_data)
time_slices <- trainControl(
method = "timeslice",
initialWindow = 36,
fixedWindow = TRUE,
horizon = 3,
savePredictions = TRUE,
verboseIter = FALSE
)
elastic_net_fit <- train(
CPI ~ .,
data = train_data[,-1],
na.action = "na.pass",
method = "glmnet",
preProcess = c("center", "scale"),
trControl = time_slices
)
elastic_net_fit
best_alpha = elastic_net_fit$bestTune[1] %>% pull
best_alpha
best_lambda = elastic_net_fit$bestTune[2] %>% pull
best_lambda
lasso_preds <- elastic_net_fit$pred %>%
filter(alpha == best_alpha,
lambda == best_lambda)
get_predictions <- function(x){
x1 <- x %>%
filter(!Resample == unique(Resample)[length(unique(Resample))]) %>%
group_by(Resample) %>%
filter(rowIndex == min(rowIndex)) %>%
ungroup() %>%
select(rowIndex,pred, obs) %>%
rename(CPI = obs) %>%
left_join(forecast_df %>% select(Date, CPI), by = "CPI") %>%
select(Date, CPI, pred)
x2 <- x %>%
filter(Resample == unique(Resample)[length(unique(Resample))]) %>%
select(rowIndex,pred, obs) %>%
rename(CPI = obs) %>%
left_join(forecast_df %>% select(Date, CPI), by = "CPI") %>%
select(Date, CPI, pred)
res <- bind_rows(x1, x2)
res
}
lasso_preds = get_predictions(lasso_preds)
lasso_test <- tibble(Date = test_data$Date,
pred = predict(elastic_net_fit,
test_data))
lasso_preds <- bind_rows(lasso_preds, lasso_test)
```{r, out.width = '100%'}
lasso_preds %>%
rename(Actual = CPI,
Forecasted = pred) %>%
gather(key = "Variable", value = "Value", Actual:Forecasted) %>%
ggplot(aes(x = Date, y = Value, color = Variable))+
geom_line(size = 0.75, alpha = 0.5)+
geom_point(size = 0.75, alpha = 0.75)+
scale_color_manual(values = c("steelblue4", "darkred"))+
theme_bw()+
scale_y_continuous(labels = scales::percent)+
scale_x_date(breaks = seq(min(lasso_preds$Date),
max(lasso_preds$Date),
by="4 months"),
date_labels = '%m-%y')+
labs(x = "",
y = "",
subtitle = "Based on YoY CPI changes",
title = "One-month ahead inflation forecast",
color = "")+
expand_limits(y = 0)+
theme(plot.subtitle = element_text(face = "italic"))
lasso_preds %>%
rename(Actual = CPI,
Forecasted = pred) %>%
gather(key = "Variable", value = "Value", Actual:Forecasted) %>%
ggplot(aes(x = Date, y = Value, color = Variable))+
geom_line(size = 0.75, alpha = 0.5)+
geom_point(size = 0.75, alpha = 0.75)+
scale_color_manual(values = c("steelblue4", "darkred"))+
theme_bw()+
scale_y_continuous(labels = scales::percent)+
scale_x_date(breaks = seq(min(lasso_preds$Date),
max(lasso_preds$Date),
by="4 months"),
date_labels = '%m-%y')+
labs(x = "",
y = "",
subtitle = "Based on YoY CPI changes",
title = "One-month ahead inflation forecast",
color = "")+
expand_limits(y = 0)+
theme(plot.subtitle = element_text(face = "italic"))
The plot shows a one-month ahead inflation forecast and actual inflation based on the YoY CPI changes.
```{r, out.width = '100%'}
lasso_preds %>%
ggplot(aes(x = pred, y = CPI))+
geom_point(size = 1.5, alpha = 0.8, color = "darkred")+
geom_abline(intercept = 0,
slope = 1,
size = 0.3,
linetype = 3,
alpha = 0.8,
color = "steelblue4")+
theme_bw()+
scale_y_continuous(labels = scales::percent)+
scale_x_continuous(labels = scales::percent)+
expand_limits(y = 0, x = 0)+
labs(title = "Model Prediction & True Value",
x = "Model Prediction",
y = "True Value")
lasso_preds %>%
ggplot(aes(x = pred, y = CPI))+
geom_point(size = 1.5, alpha = 0.8, color = "darkred")+
geom_abline(intercept = 0,
slope = 1,
size = 0.3,
linetype = 3,
alpha = 0.8,
color = "steelblue4")+
theme_bw()+
scale_y_continuous(labels = scales::percent)+
scale_x_continuous(labels = scales::percent)+
expand_limits(y = 0, x = 0)+
labs(title = "Model Prediction & True Value",
x = "Model Prediction",
y = "True Value")
The second plot shows the predictions vs. the real values. You would expect to see the points are piled up around the 45-degree line. The model seems consistent in its predictions except for the three outliers, which will become sounder in the following plot.
```{r, out.width = '100%'}
lasso_preds %>%
mutate(Residual = CPI - pred) %>%
ggplot(aes(x = Date, y = Residual))+
geom_point(size = 1.5, alpha = 0.8, color = "steelblue4")+
geom_ribbon(stat='smooth', se=TRUE, alpha=0.05) +
geom_line(stat='smooth', alpha=1, color = "darkred")+
theme_bw() +
labs(y = "Residuals",
x = "",
title = "Elastic Net Model Residuals",
subtitle = "Over time")+
scale_y_continuous(labels = scales::percent)
lasso_preds %>%
mutate(Residual = CPI - pred) %>%
ggplot(aes(x = Date, y = Residual))+
geom_point(size = 1.5, alpha = 0.8, color = "steelblue4")+
geom_ribbon(stat='smooth', se=TRUE, alpha=0.05) +
geom_line(stat='smooth', alpha=1, color = "darkred")+
theme_bw() +
labs(y = "Residuals",
x = "",
title = "Elastic Net Model Residuals",
subtitle = "Over time")+
scale_y_continuous(labels = scales::percent)
The third plot shows the model residuals over time. Notice that the model performance improves over time (until 2021), the smoothed residual curve gets closer to zero, and the frequency of outliers decreases. However, since 2021, the model performance has started to deteriorate caused by economic shocks. A different dynamic that cannot be taken into account comes into play.
```{r, out.width = '100%'}
var_names <- coef(elastic_net_fit$finalModel,
elastic_net_fit$finalModel$lambdaOpt) %>%
rownames()
var_values <- coef(elastic_net_fit$finalModel,
elastic_net_fit$finalModel$lambdaOpt) %>%
as.numeric()
model_result <- tibble(Variable_Names = var_names,
Coefficients = var_values)
model_result %>%
mutate(Variable = gsub('[[:digit:]]+', '',
str_remove(model_result$Variable_Names,
"_Lag"))) %>%
group_by(Variable) %>%
summarise(Overall_Effect = sum(Coefficients)) %>%
filter(!Overall_Effect == 0) %>%
filter(!Variable == "(Intercept)") %>%
mutate(If_Positive = ifelse(Overall_Effect >0, "Positive", "Negative")) %>%
mutate(Sum = sum(abs(Overall_Effect))) %>%
mutate(Percent_Effect = Overall_Effect / Sum) %>%
ggplot(aes(x = reorder(Variable, abs(Overall_Effect)), y = abs(Percent_Effect), fill = If_Positive))+
geom_col(alpha = 3)+
scale_y_continuous(labels = scales::percent)+
expand_limits(y = c(0,0.45))+
coord_flip() +
labs(y = "",
x = "",
fill = "",
title = "The weighted effects macroeconomic variables on Turkey's Inflation",
subtitle = "Shows the overall effect through different lags",
caption = "Source: CBRT")+
theme_bw()+
scale_fill_wsj()
today()
forecast_date = case_when(
day(today()) > 15 ~ as.Date(as.yearmon(today())) + months(1) - days(1),
TRUE ~ as.Date(as.yearmon(today())) - 1
)
forecast_date
elastic_net_fit <- train(
CPI ~ .,
data = train_data[,-1],
na.action = "na.omit",
method = "glmnet",
preProcess = c("center", "scale"),
trControl = time_slices
)
elastic_net_fit
pass
elastic_net_fit <- train(
CPI ~ .,
data = train_data[,-1],
na.action = "na.pass",
method = "glmnet",
preProcess = c("center", "scale"),
trControl = time_slices
)
elastic_net_fit
?train
