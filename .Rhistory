scale_x_date(date_breaks = "1 month", date_labels =  "%m %Y")+
labs(x = "Date",
y = "",
title = "One-month ahead inflation forecast",
caption = "Source: TCMB")+
theme(plot.title = element_text(face = "italic"))
ggplotly(inf_plot)
inf_plot <- ensemble_preds %>%
rename(Actual = CPI,
Forecasted = average_pred) %>%
gather(key = "Variable", value = "Value", Actual:Forecasted) %>%
ggplot(aes(x = Date, y = Value, color = Variable))+
geom_line(size = 0.8, alpha = 1, show.legend = FALSE)+
scale_color_economist()+
theme_calc()+
scale_y_continuous(labels = scales::percent)+
scale_x_date(date_breaks = "3 month", date_labels =  "%m %Y")+
labs(x = "Date",
y = "",
title = "One-month ahead inflation forecast",
caption = "Source: TCMB")+
theme(plot.title = element_text(face = "italic"))
ggplotly(inf_plot)
inf_plot <- ensemble_preds %>%
rename(Actual = CPI,
Forecasted = average_pred) %>%
gather(key = "Variable", value = "Value", Actual:Forecasted) %>%
ggplot(aes(x = Date, y = Value, color = Variable))+
geom_line(size = 0.8, alpha = 1, show.legend = FALSE)+
scale_color_calc()+
theme_calc()+
scale_y_continuous(labels = scales::percent)+
scale_x_date(date_breaks = "3 month", date_labels =  "%m %Y")+
labs(x = "Date",
y = "",
title = "One-month ahead inflation forecast",
caption = "Source: TCMB")+
theme(plot.title = element_text(face = "italic"))
ggplotly(inf_plot)
df %>%
plot_time_series(
.date_var = Date,
.value = Import_Annual_Ret,
.smooth = T,
.smooth_alpha = 0.5,
.smooth_size = 0.7,
.smooth_color = "darkred",
.legend_show = TRUE,
.title = "Annual Inflation Rate"
)
df
forecast_df
forecast_df %>%
plot_time_series(
.date_var = Date,
.value = Import_Annual_Ret,
.smooth = T,
.smooth_alpha = 0.5,
.smooth_size = 0.7,
.smooth_color = "darkred",
.legend_show = TRUE,
.title = "Annual Inflation Rate"
)
df
load("~/turkey-macro-dashboard/df.Rda")
df
df <- na.locf(df)
df <- df %>%
mutate(CPI = CPI/lag(CPI,12) - 1) %>%
mutate(Domestic_PPI = Domestic_PPI/lag(Domestic_PPI,12) -1) %>%
mutate(Production_Volume = Production_Volume/lag(Production_Volume, 12) -1) %>%
mutate(Export_Orders = Export_Orders/lag(Export_Orders, 12) -1) %>%
mutate(Average_Import_Price = Average_Import_Price * Usd_Try) %>%
mutate(Import_Annual_Ret = Average_Import_Price/lag(Average_Import_Price, 12) -1) %>%
mutate(Import_Monthly_Ret = Average_Import_Price/lag(Average_Import_Price, 1) -1) %>%
mutate(UsdTry_Annual_Ret = Usd_Try/lag(Usd_Try, 12) -1) %>%
mutate(UsdTry_Monthly_Ret = Usd_Try/lag(Usd_Try, 1) -1) %>%
select(-Average_Import_Price, -Usd_Try) %>%
filter(Date >= "2014-01-01")
df
forecast_df <- df %>%
future_frame(
.date_var = Date,
.length_out = "12 months",
.bind_data = TRUE)
lag_variables <- list()
for(i in 1:6){
x <- forecast_df %>%
mutate_if(is.numeric, lag, i)
colnames(x) <- c("Date",paste0(colnames(df[,-1]), "_Lag", i))
lag_variables[[i]] <- x
}
lag_df <- reduce(lag_variables, left_join, by = "Date")
forecast_df <- forecast_df %>%
select(Date, CPI) %>%
left_join(lag_df, by = "Date")
forecast_df <- forecast_df %>%
filter(Date > "2015-01-31")
forecast_df <- forecast_df %>%
mutate(Month = as.factor(month(Date)))
forecast_df
colnames(forecast_d)
colnames(forecast_df)
library(caret)
forecast_date = as.Date(as.yearmon(today())) + months(1) - days(1)
forecast_df <- forecast_df %>%
filter(Date <= forecast_date)
rm(list = ls())
library(tidyverse)
library(zoo)
library(xts)
library(PerformanceAnalytics)
library(forecast)
library(lubridate)
library(modeltime)
library(timetk)
library(skimr)
library(tidymodels)
library(ggthemes)
load("~/turkey-macro-dashboard/df.Rda")
df <- na.locf(df)
df <- df %>%
mutate(CPI = CPI/lag(CPI,12) - 1) %>%
mutate(Domestic_PPI = Domestic_PPI/lag(Domestic_PPI,12) -1) %>%
mutate(Production_Volume = Production_Volume/lag(Production_Volume, 12) -1) %>%
mutate(Export_Orders = Export_Orders/lag(Export_Orders, 12) -1) %>%
mutate(Average_Import_Price = Average_Import_Price * Usd_Try) %>%
mutate(Import_Annual_Ret = Average_Import_Price/lag(Average_Import_Price, 12) -1) %>%
mutate(Import_Monthly_Ret = Average_Import_Price/lag(Average_Import_Price, 1) -1) %>%
mutate(UsdTry_Annual_Ret = Usd_Try/lag(Usd_Try, 12) -1) %>%
mutate(UsdTry_Monthly_Ret = Usd_Try/lag(Usd_Try, 1) -1) %>%
select(-Average_Import_Price, -Usd_Try) %>%
filter(Date >= "2014-01-01")
forecast_df <- df %>%
future_frame(
.date_var = Date,
.length_out = "12 months",
.bind_data = TRUE)
lag_variables <- list()
for(i in 1:6){
x <- forecast_df %>%
mutate_if(is.numeric, lag, i)
colnames(x) <- c("Date",paste0(colnames(df[,-1]), "_Lag", i))
lag_variables[[i]] <- x
}
lag_df <- reduce(lag_variables, left_join, by = "Date")
forecast_df <- forecast_df %>%
select(Date, CPI) %>%
left_join(lag_df, by = "Date")
forecast_df <- forecast_df %>%
filter(Date > "2015-01-31")
forecast_df <- forecast_df %>%
mutate(Month = as.factor(month(Date)))
library(caret)
forecast_date = as.Date(as.yearmon(today())) + months(1) - days(1)
forecast_date
forecast_df
forecast_df %>% tail()
forecast_df <- forecast_df %>%
filter(Date < forecast_date)
forecast_df
tail(forecast_df)
library(tidyverse)
library(zoo)
library(xts)
library(PerformanceAnalytics)
library(forecast)
library(lubridate)
library(modeltime)
library(timetk)
library(skimr)
library(tidymodels)
library(ggthemes)
load("~/turkey-macro-dashboard/df.Rda")
df <- na.locf(df)
df <- df %>%
mutate(CPI = CPI/lag(CPI,12) - 1) %>%
mutate(Domestic_PPI = Domestic_PPI/lag(Domestic_PPI,12) -1) %>%
mutate(Production_Volume = Production_Volume/lag(Production_Volume, 12) -1) %>%
mutate(Export_Orders = Export_Orders/lag(Export_Orders, 12) -1) %>%
mutate(Average_Import_Price = Average_Import_Price * Usd_Try) %>%
mutate(Import_Annual_Ret = Average_Import_Price/lag(Average_Import_Price, 12) -1) %>%
mutate(Import_Monthly_Ret = Average_Import_Price/lag(Average_Import_Price, 1) -1) %>%
mutate(UsdTry_Annual_Ret = Usd_Try/lag(Usd_Try, 12) -1) %>%
mutate(UsdTry_Monthly_Ret = Usd_Try/lag(Usd_Try, 1) -1) %>%
select(-Average_Import_Price, -Usd_Try) %>%
filter(Date >= "2014-01-01")
forecast_df <- df %>%
future_frame(
.date_var = Date,
.length_out = "12 months",
.bind_data = TRUE)
lag_variables <- list()
for(i in 1:6){
x <- forecast_df %>%
mutate_if(is.numeric, lag, i)
colnames(x) <- c("Date",paste0(colnames(df[,-1]), "_Lag", i))
lag_variables[[i]] <- x
}
lag_df <- reduce(lag_variables, left_join, by = "Date")
forecast_df <- forecast_df %>%
select(Date, CPI) %>%
left_join(lag_df, by = "Date")
forecast_df <- forecast_df %>%
filter(Date > "2015-01-31")
forecast_df <- forecast_df %>%
mutate(Month = as.factor(month(Date)))
library(caret)
forecast_date = as.Date(as.yearmon(today())) + months(1) - days(1)
train_data <- forecast_df %>%
filter(Date < forecast_date)
test_data <- forecast_df %>%
filter(Date  == forecast_date)
time_slices <- trainControl(
method = "timeslice",
initialWindow = 48,
fixedWindow = FALSE,
horizon = 3,
savePredictions = TRUE,
verboseIter = TRUE
)
lasso_fit <- train(
CPI ~ .,
data = train_data,
na.action = "na.pass",
method = "glmnet",
preProcess = c("center", "scale"),
trControl = time_slices
)
lasso_fit
rf_fit <- train(CPI ~ .,
data = train_data,
method = "xgbDART",
trControl = time_slices)
glm_fit <- train(
CPI ~ .,
data = train_data[,-1],
na.action = "na.pass",
method = "glmboost",
preProcess = c("center", "scale"),
trControl = time_slices
)
rf_fit
best_nrounds = rf_fit$bestTune$nrounds
best_max_depth = rf_fit$bestTune$max_depth
best_eta = rf_fit$bestTune$eta
best_gamma = rf_fit$bestTune$gamma
best_subsample = rf_fit$bestTune$subsample
best_colsample = rf_fit$bestTune$colsample_bytree
best_rate_drop = rf_fit$bestTune$rate_drop
best_skip_drop = rf_fit$bestTune$skip_drop
best_min_child = rf_fit$bestTune$min_child_weight
rf_preds <- rf_fit$pred %>%
filter(nrounds == best_nrounds,
max_depth == best_max_depth,
eta == best_eta,
gamma == best_gamma,
subsample == best_subsample,
colsample_bytree == best_colsample,
rate_drop == best_rate_drop,
skip_drop == best_skip_drop,
min_child_weight == best_min_child)
rf_preds <- get_predictions(rf_preds)
glm_fit <- train(
CPI ~ .,
data = train_data[,-1],
na.action = "na.pass",
method = "glmboost",
preProcess = c("center", "scale"),
trControl = time_slices
)
glm_fit
best_alpha = lasso_fit$bestTune[1] %>% pull
best_lambda = lasso_fit$bestTune[2] %>% pull
best_alpha = lasso_fit$bestTune[1] %>% pull
best_lambda = lasso_fit$bestTune[2] %>% pull
lasso_preds <- lasso_fit$pred %>%
filter(alpha == best_alpha & lambda == best_lambda)
get_predictions <- function(x){
x1 <- x %>%
filter(!Resample == unique(Resample)[length(unique(Resample))]) %>%
group_by(Resample) %>%
filter(rowIndex == min(rowIndex)) %>%
ungroup() %>%
select(rowIndex,pred, obs) %>%
rename(CPI = obs) %>%
left_join(forecast_df %>% select(Date, CPI), by = "CPI") %>%
select(Date, CPI, pred)
x2 <- x %>%
filter(Resample == unique(Resample)[length(unique(Resample))]) %>%
select(rowIndex,pred, obs) %>%
rename(CPI = obs) %>%
left_join(forecast_df %>% select(Date, CPI), by = "CPI") %>%
select(Date, CPI, pred)
res <- bind_rows(x1, x2)
res
}
lasso_preds = get_predictions(lasso_preds)
best_nrounds = rf_fit$bestTune$nrounds
best_max_depth = rf_fit$bestTune$max_depth
best_eta = rf_fit$bestTune$eta
best_gamma = rf_fit$bestTune$gamma
best_subsample = rf_fit$bestTune$subsample
best_colsample = rf_fit$bestTune$colsample_bytree
best_rate_drop = rf_fit$bestTune$rate_drop
best_skip_drop = rf_fit$bestTune$skip_drop
best_min_child = rf_fit$bestTune$min_child_weight
rf_preds <- rf_fit$pred %>%
filter(nrounds == best_nrounds,
max_depth == best_max_depth,
eta == best_eta,
gamma == best_gamma,
subsample == best_subsample,
colsample_bytree == best_colsample,
rate_drop == best_rate_drop,
skip_drop == best_skip_drop,
min_child_weight == best_min_child)
rf_preds <- get_predictions(rf_preds)
ensemble_preds <- rf_preds %>%
left_join(lasso_preds %>% select(Date, pred), by = "Date") %>%
mutate(average_pred = (pred.x + pred.y)/2) %>%
select(Date, CPI, average_pred)
test_preds <- tibble(Date = test_data$Date,
CPI = test_data$CPI,
average_pred = (predict(rf_fit, test_data) + predict(lasso_fit, test_data))/2)
ensemble_preds <- bind_rows(ensemble_preds, test_preds)
ensemble_preds
mape_vec(rf_preds$CPI, rf_preds$pred)
mape_vec(lasso_preds$CPI, lasso_preds$pred)
mape_vec(ensemble_preds$CPI, ensemble_preds$average_pred)
save(forecast_df, file = "~/turkey-macro-dashboard/processed_data/processed_data.Rdata")
map(.x = 1:n, .f = function(i){
x <- forecast_df %>%
mutate_if(is.numeric, lag, i)
colnames(x) <- c("Date",paste0(colnames(df[,-1]), "_Lag", i))
x
})
n
# Desired Lag Length
n = 6
# Construct A List Consisting of Lag Variables
map(.x = 1:n, .f = function(i){
x <- forecast_df %>%
mutate_if(is.numeric, lag, i)
colnames(x) <- c("Date",paste0(colnames(df[,-1]), "_Lag", i))
x
})
save(list = c("lasso_fit",
"rf_fit",
"lasso_preds",
"ensemble_preds"),file = "~/turkey-macro-dashboard/analysis/ml_data.Rdata")
ensemble_preds
rm(list = ls())
library(flexdashboard)
library(tidyverse)
library(ggplot2)
library(plotly)
library(ggthemes)
library(RColorBrewer)
### Load Data
load("~/turkey-macro-dashboard/analysis/ml_data.Rdata")
load("~/turkey-macro-dashboard/df.Rda")
df %>%
plot_time_series(
.date_var = Date,
.value = Import_Annual_Ret,
.smooth = T,
.smooth_alpha = 0.5,
.smooth_size = 0.7,
.smooth_color = "darkred",
.legend_show = TRUE,
.title = "Annual Inflation Rate"
)
df
df %>%
plot_time_series(
.date_var = Date,
.value = Average_Import_Price,
.smooth = T,
.smooth_alpha = 0.5,
.smooth_size = 0.7,
.smooth_color = "darkred",
.legend_show = TRUE,
.title = "Annual Inflation Rate"
)
df %>%
plot_time_series(
.date_var = Date,
.value = Average_Import_Price*Usd_Try,
.smooth = T,
.smooth_alpha = 0.5,
.smooth_size = 0.7,
.smooth_color = "darkred",
.legend_show = TRUE,
.title = "Average"
)
df %>%
plot_seasonal_diagnostics(.date_var = Date,
.value = BoP,
.geom_outlier_color = "darkred",
.feature_set = "month.lbl")
rf_preds <- rf_fit$pred %>%
filter(nrounds == best_nrounds,
max_depth == best_max_depth,
eta == best_eta,
gamma == best_gamma,
subsample == best_subsample,
colsample_bytree == best_colsample,
rate_drop == best_rate_drop,
skip_drop == best_skip_drop,
min_child_weight == best_min_child)
### Choose the best xgbDART parameters
best_nrounds = rf_fit$bestTune$nrounds
rm(list = ls())
### Load Data
load("~/turkey-macro-dashboard/analysis/ml_data.Rdata")
### Choose the best xgbDART parameters
best_nrounds = rf_fit$bestTune$nrounds
best_max_depth = rf_fit$bestTune$max_depth
best_eta = rf_fit$bestTune$eta
best_gamma = rf_fit$bestTune$gamma
best_subsample = rf_fit$bestTune$subsample
best_colsample = rf_fit$bestTune$colsample_bytree
best_rate_drop = rf_fit$bestTune$rate_drop
best_skip_drop = rf_fit$bestTune$skip_drop
best_min_child = rf_fit$bestTune$min_child_weight
rf_preds <- rf_fit$pred %>%
filter(nrounds == best_nrounds,
max_depth == best_max_depth,
eta == best_eta,
gamma == best_gamma,
subsample == best_subsample,
colsample_bytree == best_colsample,
rate_drop == best_rate_drop,
skip_drop == best_skip_drop,
min_child_weight == best_min_child)
rf_preds <- get_predictions(rf_preds)
get_predictions <- function(x){
x1 <- x %>%
filter(!Resample == unique(Resample)[length(unique(Resample))]) %>%
group_by(Resample) %>%
filter(rowIndex == min(rowIndex)) %>%
ungroup() %>%
select(rowIndex,pred, obs) %>%
rename(CPI = obs) %>%
left_join(forecast_df %>% select(Date, CPI), by = "CPI") %>%
select(Date, CPI, pred)
x2 <- x %>%
filter(Resample == unique(Resample)[length(unique(Resample))]) %>%
select(rowIndex,pred, obs) %>%
rename(CPI = obs) %>%
left_join(forecast_df %>% select(Date, CPI), by = "CPI") %>%
select(Date, CPI, pred)
res <- bind_rows(x1, x2)
res
}
rf_preds <- get_predictions(rf_preds)
load("~/turkey-macro-dashboard/processed_data/processed_data.Rdata")
rf_preds <- get_predictions(rf_preds)
ensemble_preds <- rf_preds %>%
left_join(lasso_preds %>% select(Date, pred), by = "Date") %>%
mutate(average_pred = (pred.x + pred.y)/2) %>%
select(Date, CPI, average_pred)
save(list = c("lasso_fit",
"rf_fit",
"lasso_preds",
"rf_preds",
"ensemble_preds"),file = "~/turkey-macro-dashboard/analysis/ml_data.Rdata")
rm(list = ls())
### Load Data
load("~/turkey-macro-dashboard/analysis/ml_data.Rdata")
lasso_preds
test_preds
forecast_date = as.Date(as.yearmon(today())) + months(1) - days(1)
load("~/turkey-macro-dashboard/processed_data/processed_data.Rdata")
forecast_date = as.Date(as.yearmon(today())) + months(1) - days(1)
train_data <- forecast_df %>%
filter(Date < forecast_date)
test_data <- forecast_df %>%
filter(Date  == forecast_date)
lasso_test <- tibble(Date = test_data$Date,
pred = predict(lasso_fit, test_data))
rf_test <- tibble(Date = test_data$Date,
pred = predict(rf_fit, test_data))
rf_preds <- bind_rows(rf_fit, rf_test)
save(list = c("lasso_fit",
"rf_fit",
"lasso_preds",
"rf_preds",
"ensemble_preds"),file = "~/turkey-macro-dashboard/analysis/ml_data.Rdata")
rf_preds <- bind_rows(rf_preds, rf_test)
ensemble_preds <- bind_rows(ensemble_preds, test_preds)
test_preds <- tibble(Date = test_data$Date,
CPI = test_data$CPI,
average_pred = (predict(rf_fit, test_data) + predict(lasso_fit, test_data))/2)
lasso_test <- tibble(Date = test_data$Date,
pred = predict(lasso_fit, test_data))
rf_test <- tibble(Date = test_data$Date,
pred = predict(rf_fit, test_data))
rf_test
lasso_preds
lasso_preds %>% tail
lasso_preds <- bind_rows(lasso_preds, lasso_test)
lasso_preds %>% tail
ensemble_preds %>% tail
ensemble_preds <- bind_rows(ensemble_preds, test_preds)
save(list = c("lasso_fit",
"rf_fit",
"lasso_preds",
"rf_preds",
"ensemble_preds"),file = "~/turkey-macro-dashboard/analysis/ml_data.Rdata")
rm(list = ls())
