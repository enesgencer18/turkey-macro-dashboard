)
doc <- xmlTreeParse(GET(URL))
root <- xmlRoot(doc)
my_data <- xmlSApply(root, function(x)
xmlSApply(x, xmlValue))
my_data
Get_Cb_Data(Serie = "TP.CLI2.A02")
map(1:length(cb_series), .f = Get_Cb_Data(Serie = cb_series[x]))
cb_series <- c("TP.FG.J0", "TP.CLI2.A02", "TP.TUFE1YI.T1")
cb_name <- c("CPI", "Composite_Leading_Indicator", "USD_TRY", "Domestic_PPI")
map(1:length(cb_series), .f = Get_Cb_Data(Serie = cb_series[x]))
map(1:length(cb_series), .f = ~Get_Cb_Data(Serie = cb_series[.x]))
df_list <- map(1:length(cb_series),
.f = ~Get_Cb_Data(Serie = cb_series[.x]))
col_names <- c("Date", "CPI", "Composite_Leading_Indicator", "USD_TRY", "Domestic_PPI")
df <- reduce(df_list, left_join, by = "Tarih")
colnames(df) <- col_names
df
col_names <- c("Date", "CPI", "CLI", "USD_TRY", "Domestic_PPI")
colnames(df) <- col_names
df
col_names <- c("Date", "CPI", "CLI", "Domestic_PPI")
df <- reduce(df_list, left_join, by = "Tarih")
colnames(df) <- col_names
df
df %>%
mutate(Date = lubridate::as_date(Date))
df %>%
mutate(Date = lubridate::as_date(Date, format = "%Y-%m"))
df %>%
mutate(Date = as.POSIXct(Date, format = "%Y-%m"))
df %>%
mutate(Date = as.yearmon(Date, format = "%Y-%m"))
df %>%
mutate(Date = as.Date(as.yearmon(Date, format = "%Y-%m")))
df %>%
mutate(Date = as.Date(as.yearmon(Date, format = "%Y-%m")) + 1)
df %>%
df %>%
mutate(Date = as.Date(as.yearmon(Date, format = "%Y-%m")) + lubridate::months(1) - lubridate::days(1))
df %>%
mutate(Date = as.Date(as.yearmon(Date, format = "%Y-%m")) + months(1) - days(1))
library(lubridate)
df %>%
mutate(Date = as.Date(as.yearmon(Date, format = "%Y-%m")) + months(1) - days(1))
df %>%
mutate(Date = as.Date(as.yearmon(Date, format = "%Y-%m")) + months(1) - days(1)) %>%
mutate_at(.vars = is.character, as.numeric)
df %>%
mutate(Date = as.Date(as.yearmon(Date, format = "%Y-%m")) + months(1) - days(1)) %>%
mutate_at(is.character, as.numeric)
df %>%
mutate(Date = as.Date(as.yearmon(Date, format = "%Y-%m")) + months(1) - days(1)) %>%
mutate_at(is.character(), as.numeric)
df %>%
mutate(Date = as.Date(as.yearmon(Date, format = "%Y-%m")) + months(1) - days(1)) %>%
mutate_if(is.character(), as.numeric)
df %>%
mutate(Date = as.Date(as.yearmon(Date, format = "%Y-%m")) + months(1) - days(1)) %>%
mutate_if(.predicate = is.character, .funs = as.numeric())
df %>%
mutate(Date = as.Date(as.yearmon(Date, format = "%Y-%m")) + months(1) - days(1)) %>%
mutate_if(.predicate = is.character, .funs = as.numeric)
df <- df %>%
mutate(Date = as.Date(as.yearmon(Date, format = "%Y-%m")) + months(1) - days(1)) %>%
mutate_if(.predicate = is.character, .funs = as.numeric)
install.packages("tidyquant")
library(tidyquant)
aapl <- tq_get(x = "USDTRY")
aap;
aapl
rm(list = aapl)
rm(list = "aapl")
tq_get(x = "USDTRY",
from = '2012-01-01',
to = lubridate::today())
### Get USDTRY Data
quantmod::getFX(Currencies = "USD/TRY", from = "2012-01-01", to = lubridate::today())
### Get USDTRY Data
quantmod::getFX(Currencies = "USD/TRY", to = lubridate::today())
### Get USDTRY Data
quantmod::getFX(Currencies = "USD/TRY")
cb_series <-c(
"TP.FG.J0",
"TP.CLI2.A02",
"TP.TUFE1YI.T1",
"TP.BEK.S01.E.U",
"TP.FHGE.S01",
"TP.GY1.N2.MA",
"TP.GY4.N2.MA",
"TP.GY7.N2.MA"
)
col_names <- c(
"Date",
"CPI",
"CLI",
"Domestic_PPI",
"Inflation_Expectation",
"FS_Confidience",
"RS_Confidience",
"Production_Volume",
"Export_Orders"
)
df_list <- map(1:length(cb_series),
.f = ~Get_Cb_Data(Serie = cb_series[.x]))
Serie = "TP.FHGE.S01"
URL <- paste0(
"https://evds2.tcmb.gov.tr/service/evds/series=",
paste0(Serie, collapse = "-"),
"&startDate=",
Start_Date,
"&endDate=",
format(End_Date, "%d-%m-%Y"),
"&type=xml&key=",
API
)
doc <- xmlTreeParse(GET(URL))
root <- xmlRoot(doc)
my_data <- xmlSApply(root, function(x)
xmlSApply(x, xmlValue))
my_data
my_data <- data.frame(my_data, row.names = NULL)
Get_Cb_Data <- function(Serie = "TP.FG.J0",
Start_Date = "01-01-2013",
End_Date = lubridate::today(),
API = "QGeXzOxn4l"){
URL <- paste0(
"https://evds2.tcmb.gov.tr/service/evds/series=",
paste0(Serie, collapse = "-"),
"&startDate=",
Start_Date,
"&endDate=",
format(End_Date, "%d-%m-%Y"),
"&type=xml&key=",
API
)
doc <- xmlTreeParse(GET(URL))
root <- xmlRoot(doc)
my_data <- xmlSApply(root, function(x)
xmlSApply(x, xmlValue))
my_data <- data.frame(my_data, row.names = NULL)
my_data <- t(my_data)
colnames(my_data) <- unique(names(root[2]$items))
my_data <- my_data[-1, c(1:(ncol(my_data) - 1))]
rownames(my_data) <- NULL
my_data <- as_tibble(my_data)
my_data
}
cb_series <-c(
"TP.FG.J0",
"TP.CLI2.A02",
"TP.TUFE1YI.T1",
"TP.BEK.S01.E.U",
"TP.FHGE.S01",
"TP.GY1.N2.MA",
"TP.GY4.N2.MA",
"TP.GY7.N2.MA"
)
col_names <- c(
"Date",
"CPI",
"CLI",
"Domestic_PPI",
"Inflation_Expectation",
"FS_Confidience",
"RS_Confidience",
"Production_Volume",
"Export_Orders"
)
df_list <- map(1:length(cb_series),
.f = ~Get_Cb_Data(Serie = cb_series[.x]))
df <- reduce(df_list, left_join, by = "Tarih")
colnames(df) <- col_names
df
df <- df %>%
mutate(Date = as.Date(as.yearmon(Date, format = "%Y-%m")) + months(1) - days(1)) %>%
mutate_if(.predicate = is.character, .funs = as.numeric)
df
setwd("~/GitHub/turkey-inflation-dashboard/raw_data")
save(df, "df.Rdata")
save(list = df, file = "df.Rdata")
save(list = df, file = "df.Rda")
save(df, file = "df.Rda")
rm(list = ls())
library(tidyverse)
library(tidyverse)
library(tidymodels)
library(modeltime)
load("~/Github/turkey-inflation-dashboard/raw-data/df.Rda")
load("~/Github/turkey-inflation-dashboard/raw_data/df.Rda")
df
library(ts)
df$Date[nrow(df)]
library(lubridate)
month(df$Date[nrow(df)])
end_year <- year(df$Date[nrow(df)])
start_month <- month(df$Date[1])
start_year <- year(df$Date[1])
ts(df$CPI, start = c(start_year, start_month), end = c(end_year, end_month), frequency = 12)
end_month <- month(df$Date[nrow(df)])
end_year <- year(df$Date[nrow(df)])
start_month <- month(df$Date[1])
start_year <- year(df$Date[1])
ts(df$CPI, start = c(start_year, start_month), end = c(end_year, end_month), frequency = 12)
Cpi <- ts(df$CPI, start = c(start_year, start_month), end = c(end_year, end_month), frequency = 12)
CPI <- ts(df$CPI, start = c(start_year, start_month), end = c(end_year, end_month), frequency = 12)
CLI <- ts(df$CLI, start = c(start_year, start_month), end = c(end_year, end_month), frequency = 12)
# define CPI as ts object
CPI <- ts(
df$CPI,
start = c(start_year, start_month),
end = c(end_year, end_month),
frequency = 12
)
# define CLI as ts object
CLI <- ts(
df$CLI,
start = c(start_year, start_month),
end = c(end_year, end_month),
frequency = 12
)
# define Domestic PPI as ts object
Domestic_PPI <- ts(
df$Domestic_PPI,
start = c(start_year, start_month),
end = c(end_year, end_month),
frequency = 12
)
# define Inflation Expectation as ts object
Inf_Exp <- ts(
df$Inflation_Expectation,
start = c(start_year, start_month),
end = c(end_year, end_month),
frequency = 12
)
# define Financial Sector Confidience Index as ts object
FS_Conf <- ts(
df$FS_Confidience,
start = c(start_year, start_month),
end = c(end_year, end_month),
frequency = 12
)
# define Real Sector Confidience Index as ts object
RS_Conf <- ts(
df$RS_Confidience,
start = c(start_year, start_month),
end = c(end_year, end_month),
frequency = 12
)
# define Production Volume as ts object
Prod_Vol <- ts(
df$Production_Volume,
start = c(start_year, start_month),
end = c(end_year, end_month),
frequency = 12
)
# define Export Orders as ts object
Exp_Ord <- ts(
df$Export_Orders,
start = c(start_year, start_month),
end = c(end_year, end_month),
frequency = 12
)
window(ts.union(CPI,
CLI,
Domestic_PPI,
Inf_Exp,
FS_Conf,
RS_Conf,
Prod_Vol,
Exp_Ord),
start = c(start_year, start_month),
end = c(end_year, end_month))
VAR_df <- window(ts.union(CPI,
CLI,
Domestic_PPI,
Inf_Exp,
FS_Conf,
RS_Conf,
Prod_Vol,
Exp_Ord),
start = c(start_year, start_month),
end = c(end_year, end_month))
VAR(y = VAR_data, p =2)
VAR(y = VAR_data, x=2
)
VAR(x = VAR_df)
VAR_est <- VAR(x = VAR_df,  p = 2)
?VAR
VAR_est <- VAR(x = VAR_df, p = 2)
VAR_est <- VAR(x = VAR_df)
library(forecast)
VAR(x = VAR_df)
library(AER)
library(dynlm)
library(forecast)
library(readxl)
library(stargazer)
library(scales)
library(quantmod)
library(urca)
install.packages("dynlm")
library(dynlm)
VAR(x = VAR_df)
library(AER)
library(readxl)
library(dynlm)
library(vars)
library(quantmod)
library(scales)
library(fGarch)
install.packages("vars")
VAR_est <- vars::VAR(x = VAR_df)
vars::VAR(VAR_df, p = 12)
VAR_est <- vars::VAR(y = na.omit(VAR_df), p = 12)
vars::VAR(y = na.omit(VAR_df), p = 12)
View(VAR_est)
vars::VAR(y = na.omit(VAR_df))
autoplot(VAR_est)
plot(VAR_est)
plot(CPI)
plot(CPI)
autoplot(CPI)
CPI
plot(df$CPI)
plot(df$CPI)
autoplot(CPI)
auto.arima(y = CPI, stationary = TRUE, seasonal = TRUE)
auto.arima(y = CLI, stationary = TRUE, seasonal = TRUE)
auto.arima(y = Domestic_PPI, stationary = TRUE, seasonal = TRUE)
auto.arima(y = CPI, seasonal = TRUE)
auto.arima(y = CPI)
tbats(y = CPI, use.box.cox = TRUE)
tbats(y = CLI, use.box.cox = TRUE)
forecast(VAR_est)
na.omit(VAR_df)
VAR_est <- vars::VAR(y = na.omit(VAR_df))
forecast(VAR_est)
autoplot(forecast(VAR_est))
VAR_est <- vars::VAR(y = na.omit(VAR_df), season = TRUE, lag.max = 12, ic = "aic")
VAR_est <- vars::VAR(y = na.omit(VAR_df), season = TRUE, lag.max = 12, ic = "AIC")
VAR_est <- vars::VAR(y = na.omit(VAR_df), lag.max = 12, ic = "AIC")
autoplot(forecast(VAR_est))
VAR_est <- vars::VAR(y = na.omit(VAR_df), p = 12)
autoplot(forecast(VAR_est))
VAR_est <- vars::VAR(y = na.omit(VAR_df), p = 6)
autoplot(forecast(VAR_est))
VAR_est
vars::VARselect(na.omit(VAR_df), lag.max = 6)
VAR_est <- vars::VAR(y = na.omit(VAR_df), p = 3)
autoplot(forecast(VAR_est))
VAR_est
vars::VARselect(na.omit(VAR_df), lag.max = 6)
vars::VARselect(na.omit(VAR_df), lag.max = 12)
vars::VARselect(na.omit(VAR_df), lag.max = 24)
VAR_df <- window(ts.union(CPI,
Domestic_PPI,
Inf_Exp,
FS_Conf,
Exp_Ord),
start = c(start_year, start_month),
end = c(end_year, end_month))
vars::VARselect(na.omit(VAR_df), lag.max = 24)
vars::VARselect(na.omit(VAR_df), lag.max = 6)
vars::VARselect(na.omit(VAR_df), lag.max = 9)
VAR_est <- vars::VAR(y = na.omit(VAR_df), p = 9)
VAR_est
autoplot(forecast(VAR_est))
autoplot(forecast(VAR_est, h = 1))
df %>%
ggplot(aes(x = Date, y = CPI))+
geom_line()
df %>%
ggplot(aes(x = Date, y = CPI))+
geom_line()+
scale_x_date()
df %>%
ggplot(aes(x = Date, y = CPI))+
geom_line()+
scale_x_date(date_breaks = "1 month", date_labels =  "%b %Y")
df %>%
ggplot(aes(x = Date, y = CPI))+
geom_line()+
scale_x_date(date_breaks = "6 month", date_labels =  "%b %Y")
df %>%
ggplot(aes(x = Date, y = CPI/lag(CPI, 12)))+
geom_line()+
scale_x_date(date_breaks = "6 month", date_labels =  "%b %Y")
df %>%
ggplot(aes(x = Date, y = (CPI/lag(CPI, 12)-1)))+
geom_line()+
scale_x_date(date_breaks = "6 month", date_labels =  "%b %Y")
df %>%
ggplot(aes(x = Date, y = (CPI/lag(CPI, 12)-1)))+
geom_line()+
scale_x_date(date_breaks = "6 month", date_labels =  "%b %Y")
df %>%
mutate(Inflation = CPI/lag(CPI, 12))
Inflation = CPI/lag(CPI,12)
df <- df %>%
mutate(Inflation = CPI/lag(CPI, 12))
Inflation <- ts(
df$Inflation,
start = c(start_year, start_month),
end = c(end_year, end_month),
frequency = 12
)
Inflation
Inflation <- ts(
df$Inflation %>% na.omit(),
start = c(start_year, start_month),
end = c(end_year, end_month),
frequency = 12
)
Inflation
auto.arima(Inflation)
autoplot(forecast(auto.arima(Inflation)))
df <- df %>%
mutate(Inflation = CPI/lag(CPI, 12) - 1)
Inflation <- ts(
df$Inflation %>% na.omit(),
start = c(start_year, start_month),
end = c(end_year, end_month),
frequency = 12
)
autoplot(forecast(auto.arima(Inflation)))
Inflation
df
View(df)
install.packages("flexdashboard")
library(XML)
library(methods)
library(httr)
library(xts)
library(tidyverse)
library(lubridate)
source("~/turkey-macro-dashboard/functions/Get_Cb_Data.R")
cb_series <-c(
"TP.FG.J0",
"TP.CLI2.A02",
"TP.TUFE1YI.T1",
"TP.BEK.S01.E.U",
"TP.FHGE.S01",
"TP.GY1.N2.MA",
"TP.GY4.N2.MA",
"TP.GY7.N2.MA",
"TP.ODEAYRSUNUM6.Q1"
)
col_names <- c(
"Date",
"CPI",
"CLI",
"Domestic_PPI",
"Inflation_Expectation",
"FS_Confidience",
"RS_Confidience",
"Production_Volume",
"Export_Orders",
"BoP"
)
df_list <- map(1:length(cb_series),
.f = ~Get_Cb_Data(Serie = cb_series[.x]))
df <- reduce(df_list, left_join, by = "Tarih")
colnames(df) <- col_names
df <- df %>%
mutate(Date = as.Date(as.yearmon(Date, format = "%Y-%m")) + months(1) - days(1)) %>%
mutate_if(.predicate = is.character, .funs = as.numeric)
save(df, file = "df.Rda")
Get_Cb_Data(Serie = "TP.APIFON4")
library(XML)
library(methods)
library(httr)
library(xts)
library(tidyverse)
library(lubridate)
source("~/turkey-macro-dashboard/functions/Get_Cb_Data.R")
cb_series <-c(
"TP.FG.J0",
"TP.CLI2.A02",
"TP.TUFE1YI.T1",
"TP.BEK.S01.E.U",
"TP.FHGE.S01",
"TP.GY1.N2.MA",
"TP.GY4.N2.MA",
"TP.GY7.N2.MA",
"TP.ODEAYRSUNUM6.Q1",
"TP.KKO.MA",
"TP.TG2.Y03"
)
col_names <- c(
"Date",
"CPI",
"CLI",
"Domestic_PPI",
"Inflation_Expectation",
"FS_Confidience",
"RS_Confidience",
"Production_Volume",
"Export_Orders",
"BoP",
"Utilization_Rate",
"Consumer_Confidience"
)
df_list <- map(1:length(cb_series),
.f = ~Get_Cb_Data(Serie = cb_series[.x]))
df <- reduce(df_list, left_join, by = "Tarih")
colnames(df) <- col_names
df <- df %>%
mutate(Date = as.Date(as.yearmon(Date, format = "%Y-%m")) + months(1) - days(1)) %>%
mutate_if(.predicate = is.character, .funs = as.numeric)
save(df, file = "df.Rda")
rm(list = ls())
